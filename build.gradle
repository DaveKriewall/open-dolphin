apply plugin: 'idea'

ext {
    dolphinVersion = '0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'idea'

    sourceCompatibility = '1.5'
    targetCompatibility = '1.5'
    archivesBaseName = "dolphin-${project.name}"
    version = dolphinVersion

    repositories {
        mavenCentral()
    }

    dependencies {
        groovy  'org.codehaus.groovy:groovy-all:1.8.6'
        testCompile 'org.spockframework:spock-core:0.6-groovy-1.8', {
            exclude group:'org.codehaus.groovy', module: 'groovy-all'
        }
        testRuntime 'net.sourceforge.cobertura:cobertura:1.9.4.1'
    }

    task makeDirs(description:'make all dirs for project setup') << {
        def sources = [sourceSets.main, sourceSets.test]
        sources*.allSource*.srcDirs.flatten().each { File srcDir ->
            println "making $srcDir"
            srcDir.mkdirs()
        }
    }

    if ( ! project.hasProperty('coverage')) return
    if ( project.name.startsWith('demo-'))  return
    apply from: "${rootDir}/gradle/coverage.gradle"
}

def mavenizedProjects() {
    [
            project(':client'),
            project(':shared'),
            project(':server')
    ]
}

configure(mavenizedProjects()) {
    group = 'com.canoo.dolphin'
    apply plugin: 'maven'
}

def distDir = new File(rootDir, 'dist')
subprojects.each { proj ->
    evaluationDependsOn proj.path
    proj.jar.doLast { jarTask ->
        copy {
            from jarTask.archivePath
            into distDir
        }
    }
    if (proj.name.startsWith('demo-')){
        proj.tasks.add(name: 'demoZip', type: Zip) {
            classifier = 'src'
            destinationDir = distDir
            from proj.sourceSets*.allSource
        }
    }
}






task wrapper(type:Wrapper, description:"create a gradlew") {
    gradleVersion = '1.0'
}
