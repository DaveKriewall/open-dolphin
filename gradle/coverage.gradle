/*
 * Copyright 2010-2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

cobSerFile = "${project.buildDir}/cobertura.ser"
rtOriginal = "${sourceSets.rt.classesDir}"
rtCopy = "${rtOriginal}-copy"
cliOriginal = "${sourceSets.cli.classesDir}"
cliCopy = "${cliOriginal}-copy"

configurations {
    cobertura
    clover
}

dependencies {
    cobertura 'net.sourceforge.cobertura:cobertura:1.9.3',
              'junit:junit:4.8.1'
    clover 'com.cenqua.clover:clover:3.0.2'
}

coberturaEnabled = project.hasProperty('withCobertura')
cloverEnabled = project.hasProperty('withClover')

test.doFirst  {
    if(coberturaEnabled && cloverEnabled) {
        throw new RuntimeException('You can enable either cobertura or clover but not both')
    }

    if(coberturaEnabled) {
        ant {
            // delete data file for cobertura, otherwise coverage would be added
            delete(file: cobSerFile, failonerror:false)
            // delete copy of original classes
            delete(dir: rtCopy, failonerror:false)
            delete(dir: cliCopy, failonerror:false)
            // import cobertura task, so it is available in the script
            taskdef(resource:'tasks.properties', classpath: configurations.cobertura.asPath)
            // create copy (backup) of original class files
            copy(todir: rtCopy) {
                fileset(dir: rtOriginal)
            }
            copy(todir: cliCopy) {
                fileset(dir: cliOriginal)
            }
            // instrument the relevant classes in-place
            'cobertura-instrument'(datafile: cobSerFile) {
                fileset(dir: rtOriginal, includes: '**/*.class')
                fileset(dir: cliOriginal, includes: '**/*.class')
            }
        }
    }

    if(cloverEnabled) {
		ant.taskdef(name: 'groovyc', classname: 'org.codehaus.groovy.ant.Groovyc', classpath: configurations.groovy.asPath)
		ant.taskdef(resource: 'cloverlib.xml', classpath: configurations.clover.asPath)
		ant.property(name: 'clover.license.path', value: 'clover.license')

		ant."clover-clean"()
		ant.'clover-setup'(initString: "${buildDir}/clover/clover.db", tmpDir: "${buildDir}/clover/tmp") {
		    fileset(dir: 'src/main/rt') {
		        include(name: '**/*.groovy')
		        include(name: '**/*.java')
		    }
		    fileset(dir: 'src/main/cli') {
		        include(name: '**/*.groovy')
		        include(name: '**/*.java')
		    }
		}
		
		//move original classes
		ant.move(file: rtOriginal, tofile: rtCopy)
		ant.move(file: cliOriginal, tofile: cliCopy)

		//compile instrumented classes
		sourceSets.rt.classesDir.mkdirs()
		ant.groovyc(
			destdir: sourceSets.rt.classesDir,
			fork: true,
			verbose: true) {
			classpath {
				pathElement path: configurations.rt.asPath
				pathElement path: configurations.clover.asPath
			}
			javac(source:sourceCompatibility, target: targetCompatibility) {
				classpath {
					pathElement location: rtOriginal
					pathElement path: configurations.rt.asPath
					pathElement path: configurations.clover.asPath
				}
			}

			src(path: 'src/main/rt')
		}
		sourceSets.cli.classesDir.mkdirs()
		ant.groovyc(
			destdir: sourceSets.cli.classesDir,
			fork: true,
			verbose: true) {
			classpath {
				pathElement location: rtOriginal
				pathElement path: configurations.rt.asPath
				pathElement path: configurations.cli.asPath
				pathElement path: configurations.clover.asPath
			}
			javac(source:sourceCompatibility, target: targetCompatibility) {
				classpath {
					pathElement location: rtOriginal
					pathElement path: configurations.rt.asPath
					pathElement location: cliOriginal
					pathElement path: configurations.cli.asPath
					pathElement path: configurations.clover.asPath
				}
			}

			src(path: 'src/main/cli')
		}
		
		//copy resources
		ant.copy(todir: rtOriginal) {
			fileset(dir: rtCopy, excludes: "**/*.class")
		}
		ant.copy(todir: cliOriginal) {
			fileset(dir: cliCopy, excludes: "**/*.class")
		}						
    }
}

test {
    systemProperties = ['net.sourceforge.cobertura.datafile': cobSerFile]
    if(coberturaEnabled) classpath += configurations.cobertura
    if(cloverEnabled) classpath += configurations.clover
}

test.doLast {
    if(coberturaEnabled && cloverEnabled) {
        throw new RuntimeException('You can enable either cobertura or clover but not both')
    }

    if(coberturaEnabled && new File(rtCopy).exists() && new File(cliCopy).exists()) {
        // replace instrumented classes with backup copy again
        ant {
            delete(file: rtOriginal)
            move(file: rtCopy, tofile: rtOriginal)
            delete(file: cliOriginal)
            move(file: cliCopy, tofile: cliOriginal)
        }
        // create cobertura reports
        ant.'cobertura-report'(destdir:"${reportsDir}/coverage",
             format: 'html', datafile: cobSerFile) {
            fileset(dir: 'src/main/rt')
            fileset(dir: 'src/main/cli')
        }
    }

	if(cloverEnabled && new File(rtCopy).exists() && new File(cliCopy).exists()) {
		// restore original classes
		ant.delete(file: rtOriginal)
		ant.move(file: rtCopy, tofile: rtOriginal)
		ant.delete(file: cliOriginal)
		ant.move(file: cliCopy, tofile: cliOriginal)

		ant."clover-report" {
			current(outfile:"${reportsDir}/clover/clover.xml")
		}
		ant."clover-html-report"(outdir:"${reportsDir}/clover/html")
	}
}
