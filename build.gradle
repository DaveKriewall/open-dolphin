/*
 * Copyright 2012-2013 Canoo Engineering AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'idea'
apply plugin: 'eclipse'

ext {
    jfxLibDir = locateJfxLibDir()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:1.1.1"
    }
}

subprojects {
    apply plugin: 'cobertura'
    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    sourceCompatibility = '1.6'
    targetCompatibility = '1.6' // some users are still on 1.6
    archivesBaseName = "dolphin-${project.name}"

    cobertura {
        coverageExcludes = ['.*org.opendolphin.demo.*', '.*org.opendolphin.logo.*']
        rootProject.subprojects.each {
            coverageDirs << file("subprojects/${it.name}/build/classes/main")
        }
        rootProject.subprojects.each {
            coverageSourceDirs << file("subprojects/${it.name}/src/main/groovy")
            coverageSourceDirs << file("subprojects/${it.name}/src/main/java")
        }
    }

    repositories {
        flatDir name: 'javafx', dirs: [jfxLibDir]
        mavenCentral()
    }

    dependencies {
        compile 'org.codehaus.groovy:groovy-all:2.2.1'
        groovy  'org.codehaus.groovy:groovy-all:2.2.1'
        testCompile 'org.spockframework:spock-core:0.7-groovy-2.0', {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        }
        testRuntime 'net.saliman:gradle-cobertura-plugin:1.1.1'
    }

    task makeDirs(description: 'make all dirs for project setup') << {
        def sources = [sourceSets.main, sourceSets.test]
        sources*.allSource*.srcDirs.flatten().each { File srcDir ->
            println "making $srcDir"
            srcDir.mkdirs()
        }
    }


}

String locateJfxLibDir() {
    def javaFxHome = System.env['JAVAFX_HOME'] ?: ''
    def javaHome = System.env['JAVA_HOME'] ?: ''
    def jdk7 = System.getProperty('java.version')[0..2].toDouble() == 1.7
    def jdk8 = System.getProperty('java.version')[0..2].toDouble() == 1.8
    def jdkHome = System.properties.'java.home' ?: ''

    def result = "$javaFxHome/rt/lib"
    if (new File("$result/jfxrt.jar").exists()) {
        println "using javafx from explicit JAVAFX_HOME: $result"
        return result
    }
    result = "$jdkHome/lib/"
    if (jdk7 && new File("$result/jfxrt.jar").exists()) {
        println "using javafx from current java 7: $result"
        return result
    }
    result = "$jdkHome/lib/ext/"
    if (jdk8 && new File("$result/jfxrt.jar").exists()) {
        println "using javafx from current java 8: $result"
        return result
    }
    result = "$javaHome/jre/lib/"
    if (new File("$result/jfxrt.jar").exists()) {
        println "using javafx from explicit JAVA_HOME: $result"
        return result
    }
    result = "$javaHome/lib/"
    if (new File("$result/jfxrt.jar").exists()) {
        println "using javafx from explicit JAVA_HOME: $result"
        return result
    }
    println "please use a Java Version 7_06+"
    println " or set JAVA_HOME   to a dir that contains the jre/lib/jfxrt.jar"
    println " or set JAVAFX_HOME to a dir that contains the rt/lib/jfxrt.jar"
    System.exit 1
}

def mavenizedProjects() {
    [
            project(':client'),
            project(':client-javafx'),
            project(':shared'),
            project(':server'),
            project(':combined'),
            project(':demo-javafx-server'), // for testing with dolphin-grails
            project(':demo-javafx-shared'), // for testing with dolphin-grails
    ]
}

configure(mavenizedProjects()) {
    apply plugin: 'maven'
    apply plugin: 'signing'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc {
        failOnError = false
    }

    task groovydocJar(type: Jar, dependsOn:groovydoc) {
        classifier = 'javadoc'
        from groovydoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives groovydocJar
    }

    signing {
        required { gradle.taskGraph.hasTask(uploadArchives) }
        sign configurations.archives
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(uploadArchives)) {
            uploadArchives {
                repositories.mavenDeployer {
                    def nexusURL = version.endsWith('SNAPSHOT') ? nexusDeployURL : nexusReleaseDelopyURL
                    def sonatypeURL = version.endsWith('SNAPSHOT') ? sonatypeDeployURL : sonatypeReleaseDeployURL
                    beforeDeployment { MavenDeployment deployment ->
                        signing.signPom(deployment)
                    }
                    if (project.hasProperty('mavenCentral')) {
                        repository(url: sonatypeURL) {
                            authentication(userName: sonatypeUser, password: sonatypePassword)
                        }
                    } else {
                        repository(url: nexusURL) {
                            authentication(userName: nexusDeployUser, password: nexusDeployPassword)
                        }
                    }
                    pom.project {
                        name 'Open Dolphin'
                        packaging 'jar'
                        description 'Dolphin is a free open-source library that bridges the worlds of enterprise Java and desktop Java.' +
                                    ' It uses presentation models to bind client-side views to server-side actions.'
                        url 'http://open-dolphin.org/'

                        scm {
                            url 'https://github.com/canoo/open-dolphin.git'
                            connection 'scm:git@github.com:canoo/open-dolphin.git'
                            developerConnection 'scm:git@github.com:canoo/open-dolphin.git'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'aalmiray'
                                name 'Andres Almiray'
                            }
                            developer {
                                id 'clipp'
                                name 'Christoph Lipp'
                            }
                            developer {
                                id 'DieterHolz'
                                name 'Dieter Holz'
                            }
                            developer {
                                id 'detlef-brendle'
                                name 'Detlef Brendle'
                            }
                            developer {
                                id 'Dierk'
                                name 'Dierk Koenig'
                            }
                            developer {
                                id 'svene'
                                name 'Sven Ehrke'
                            }
                            developer {
                                id 'jporzelt'
                                name 'Johannes Porzelt'
                            }
                            developer {
                                id 'kunsingh'
                                name 'Kunal Singh'
                            }
                            developer {
                                id 'Nicolai82'
                                name 'Nicolai Kilian'
                            }
                            developer {
                                id 'ToddCostella'
                                name 'Todd Costella'
                            }
                        }
                    }
                }
            }
        }
    }

}

def distDir = new File(rootDir, 'dist')
subprojects.each { proj ->
    evaluationDependsOn proj.path
    proj.jar.doLast { jarTask ->
        copy {
            from jarTask.archivePath
            into distDir
        }
    }
    proj.tasks.create(name: 'sourceZip', type: Zip) {
        classifier = 'src'
        destinationDir = distDir
        from proj.sourceSets*.allSource
    }
}

task wrap(type: Wrapper, description: "create a gradlew") {
    gradleVersion = '1.10'
}

apply {
    from 'buildSrc/scripts/docsDependencies.gradle'
    from 'buildSrc/scripts/docs.gradle'
}


task apidoc(group: 'Documentation', type: Groovydoc) {
    def coreProjects = subprojects.findAll { !it.name.contains('demo') }
    source coreProjects.collect { project -> project.sourceSets.main.allSource }
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    groovyClasspath = classpath
    destinationDir = new File(buildDir, 'api')
    docTitle = "Open Dolphin API documentation"
    footer = "Created ${new java.text.SimpleDateFormat().format(new Date())}"
    header = docTitle
    windowTitle = docTitle
    overview = new File('docs/docOverview.html')
    link("http://download.oracle.com/javase/7/docs/api", "java.", "javax.")
    link("http://docs.oracle.com/javafx/2/api/", "javafx.")
    link("http://groovy.codehaus.org/api", "groovy.", "org.codehaus.groovy.")
}

def demos = new File(rootDir, 'subprojects/demo-javafx/combined/src/main/groovy/org/opendolphin/demo')
        .list()
        .findAll { it.startsWith('start') && it.endsWith('Demo.groovy') }
.collect { it - 'start' - 'Demo.groovy' }

task listDemos(description: "List all available demos") << { demos.sort().each { println "gradlew ${it}Demo" } }

demos.each { demo ->
    task "${demo}DemoPreparation"(description: "internal") << {
        project(':demo-javafx-combined').ext.set('demoApplicationName', demo)
    }
    def group = demo.startsWith('Grails') ? 'Demo (server required)' : 'Demo'
    task "${demo}Demo"(group: group, dependsOn: ["${demo}DemoPreparation", ':demo-javafx-combined:run'],
            description: "start the ${demo} demo") {}
}

task clean(type: Delete) {
    delete 'build'
    delete 'dist'
}

task(projectCoverage, description: 'This task merges the module cobertura reports and generates one report.') {
    doLast {
        def args = []
        def coberturaDir = new File(buildDir, 'cobertura')
        args << '--datafile'
        args << "${coberturaDir.absolutePath}/result.ser"
        args << '--basedir'
        args << projectDir.absolutePath
        new File(projectDir,'subprojects').eachFileRecurse {
            if (it.name.matches('.*.ser')) {
                args << "${it.absolutePath - projectDir.absolutePath}"
            }
        }
        net.sourceforge.cobertura.merge.Main.main(args as String[])
        args = []
        args << '--datafile'
        args << "${coberturaDir.absolutePath}/result.ser"
        args << 'format'
        args << 'html'
        args << '--destination'
        args << new File(buildDir,'reports/cobertura')
        subprojects.each {
            args.addAll(it.sourceSets.main.java.srcDirs)
            args.addAll(it.sourceSets.main.groovy.srcDirs)
        }
        net.sourceforge.cobertura.reporting.Main.main(args as String[]);
    }
}
