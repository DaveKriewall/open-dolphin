/*
Code Coverage. Eventually move to a plugin.
*/

println "configuring project $project.name for test coverage"

def coverageDir = new File(rootProject.buildDir, "coverage")
ant.delete dir: coverageDir

def coberturaSerFileName = new File(coverageDir, "ser/${project.name}.ser").absoluteFile
def mergedSerFile = new File(coverageDir, "cobertura.ser")
def mainCompiledClasses= sourceSets.main.output.classesDir
def srcCopy="${mainCompiledClasses}-copy"

test.doFirst  {

    ant {
        // delete data file for Cobertura, otherwise coverage would be added
        delete file: coberturaSerFileName , failonerror: false
        // delete copy of original classes
        delete dir: srcCopy, failonerror: false
        // import cobertura task, so it is available in the script
        taskdef resource: "tasks.properties", classpath: configurations.testRuntime.asPath
        // create copy (backup) of original class files
        mkdir dir: srcCopy
        if (mainCompiledClasses.exists()){
            copy(todir: srcCopy) {
                fileset dir: mainCompiledClasses
            }
            // instrument the relevant classes in-place
            'cobertura-instrument'(datafile: coberturaSerFileName ) {
                fileset dir: mainCompiledClasses, includes: "com/canoo/**/*.class"
            }
        }
    }
}

test {
    systemProperties.put("net.sourceforge.cobertura.datafile", coberturaSerFileName )
}

test.doLast {
    if (new File(srcCopy).exists()) {
        // replace instrumented classes with backup copy again
        ant {
            delete file: mainCompiledClasses
            delete file: mergedSerFile
            move file: srcCopy, tofile: mainCompiledClasses
        }
        // we would like to get a combined report over all subprojects
        // except the demos
        ant.'cobertura-merge'(datafile: mergedSerFile) {
            fileset dir: coverageDir, {
                include name: "ser/*.ser"
            }
        }
        // create cobertura reports
        ant.'cobertura-report'(destdir: coverageDir, format: 'html', datafile:mergedSerFile ) {
            rootProject.subprojects.each { proj -> // not nice but works...
                if (proj.name.startsWith('demo-')) return
                proj.sourceSets*.allSource.srcDirs.each { LinkedHashSet set ->
                    set.each {
                        if (it.exists()) {
                            fileset dir: it, {
                                include name: "**/*.java"
                                include name: "**/*.groovy"
                            }
                        }
                    }
                }
            }
        }
    }
}