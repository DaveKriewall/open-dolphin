h4. Release 0.9

The biggest change in release 0.9 is the inclusion of *OpenDolphin.js*, the JavaScript client (DOL-98) that allows to share
the same OpenDolphin application on desktop and web (including mobile web).\\
See also [OpenDolphin for the web|guide:web]

The [push|guide:demo_push] capability ([DOL-30|http://www.canoo.com/jira/browse/DOL-30C]) has been moved from the demos into the OpenDolphin core and is now an official feature
with a simple API, standard behaviour, and - as always - the option the replace the default implementation with
your preferred technology.

Both OpenDolphin.js and the push capability in combination with the existing OpenDolphin features allow for
new interesting use cases that are show-cased in this release:
- [multi-device|guide:demo_multi_device] applications where the same application runs on many devices
- [re-connect|guide:demo_follow_me] to an application exactly where you left off even after a longer *offline* period
- [follow-me|guide:demo_follow_me] applications where you start your work on one device - let's says on the road with a smartphone or a tablet - and complete your work in the office with a desktop application for longer text entries
- [team-applications|guide:demo_team_app] where a whole team works collaboratively and everybody immediately sees all contributions from all other team members, avoiding double-work and conflicts, and mutually completing, correcting, and helping with each other's work
- [point-of-sale|guide:demo_point_of_sale] solutions where personnel shares a limited set of workstations, freely moving between them and always having their latest context available
- application [integration|guide:demo_integration] where you combine the strength of different view technologies, say JavaFX for the layout and web technology for charting, into an integrated OpenDolphin application.

Tags are no longer enums but instances of the Tag class (DOL-95) to allow *custom tags*.
All existing tags are available as constants of that class except the MESSAGE tag, which is replaced by custom tags.

Attributes now maintain a direct reference to their PresentationModel. This allows an *efficient lookup*
of tags for a given Attribute (DOL-97). Sharing an Attribute instance between PresentationModels is no longer supported.
In order to share the same information across PresentationModels, use Attributes with the same qualifier.

Furthermore, a number of *performance enhancements* and *consistency checks* have been included.

h4. Release 0.8

25 issues have been addressed in this release where the most important ones come from our
users that already have OpenDolphin-based applications in production.
This ranges from performance-oriented topics like the support for client-side models,
command batching and compressing down to operational support to e.g. detect
unwanted breaches of the session affinity.

The full list of closed issues is at [the project JIRA|http://www.canoo.com/jira/secure/ReleaseNote.jspa?version=11263&amp;styleName=Html&amp;projectId=10480&amp;Create=Create]

h4. Release 0.7

There are no changes in this release. It has only been built to set the
maven group id to @org.open-dolphin@ to comply with the conventions on maven central.

The project artefacts are now available for download from
[MavenCentral|http://search.maven.org/#search%7Cga%7C1%7Corg.open-dolphin]

Please refer to [DolphinJumpStart|http://github.com/canoo/DolphinJumpStart] for an example on how to use OpenDolphin
with either Maven or Gradle.

h4. Release 0.6 : Notable Changes since 0.5

The 0.6 release has only one change, which is a rather big and breaking one:

{note}
The package com.canoo.dolphin has been renamed to org.opendolphin.
{note}

See also [DOL-34|http://www.canoo.com/jira/browse/DOL-34]

h4. Release 0.5 : Notable Changes since 0.4

The project artefacts are now available for download from
[MavenCentral|http://search.maven.org/#search%7Cga%7C1%7Ccom.canoo.dolphin]

Release 0.5 introduced support for asynchronous server-side events, which are distributed
through an event bus. Typical use cases for this event bus are:
- instant visualization of server side events (think JMS or hibernate events)
- consistent visualization of transient data across many clients
- cross-client notifications

Along with this capability comes a series of demos, which live directly in the OpenDolphin
code base. Some of these demos also have a video presentation on [YouTube|http://youtube.com/users/dierkkoenig]:
- [ManyEventsDemo|http://www.youtube.com/watch?v=bMKcpM4znJI] where 10'000 alarm events happen on the server and 6 clients update instantly and consistently
- [TrainControlDemo|http://www.youtube.com/watch?v=T4lrmafN39k] where a dash board changes the train speed and other clients are notified
- [LazyLoadingDemo|http://www.youtube.com/watch?v=MDWAjOBCgRU] with 100'000 rows in a table
- [PortfolioDemo|http://www.youtube.com/watch?v=W-LCvTa5MQQ] where the management of a portfolio serves as a typical example of a business application

Version 0.5 upgraded dependencies to Groovy 2.1.1. and GPars 1.0. We make use of the new
@CompileStatic where appropriate and enhanced execution speed by 60%.

[Release Notes - Dolphin - Version 0.5 |http://www.canoo.com/jira/secure/ReleaseNote.jspa?version=11281&amp;styleName=Text&amp;projectId=10480&amp;Create=Create]

h4. Release 0.4 : Notable Changes since 0.3

# DOL-25 - provide a demo that measures dolphin response times
# DOL-33 - allow more meta-infos per Attribute
# DOL-19 - Provide a code example that shows how to use dolphin for lazy loading
# DOL-21 - Build does not automatically discover javafx in JDK when JAVAFX_HOME is set
# DOL-37 - align server and client side API for CRUD operations on presentation models and attributes
# DOL-38 - nicer API for server side value change
# DOL-39 - API enhancement: server actions should work transparently on the response
# DOL-40 - API enhancement: allow finding presentation models and attributes without the need for casting in both Java and Groovy friendly manner
# DOL-41 - start a user guide
# DOL-42 - provide combined apidoc: javadoc / groovydoc
# DOL-43 - Provide a DataCommand
# DOL-44 - Provide a more complex demo (dependencies, crud operations, remoting)
# DOL-17 - provide a 'gradlew run' to start any demo
# DOL-18 - link the website to the latest version of the documentation
# DOL-32 - remove the "linking" feature

[Release Notes - Dolphin - Version 0.4 |http://www.canoo.com/jira/secure/ReleaseNote.jspa?version=11265&amp;styleName=Text&amp;projectId=10480&amp;Create=Create]

h5. Breaking Changes
The "linking" feature is no longer available. See e.g. the Crud demo for alternatives.

h5. Deprecations
In the future, we will disallow direct access to the connector or model store.

Please prepare by using the dolphin (@ClientDolphin@ and @ServerDolphin@) facade whenever possible.
This also true for all the cases where application code on the server side directly invokes constructors of
commands, presentation models or attributes. Please use factory methods instead.

h5. Solved Bugs
# DOL-15 - Basic build fails
# DOL-22 - exception in reference table demo and search demo
# DOL-26 - Binding the text property of a Swing component to a ClientPresentationModel throws Exception
# DOL-31 - ServerDolphin.createPresentationModel has an "optional" parameter, which is required
# DOL-35 - com.canoo.dolphin.demo.startCreatePresentationModelDemo.groovy still tries to invoke serverDolphin.createPresentationModel

